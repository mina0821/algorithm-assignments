package cs2xb3_a3;

import static org.junit.Assert.*;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.junit.Before;
import org.junit.Test;

import edu.princeton.cs.algs4.Digraph;

/**
 * This class tests if the path given by 
 * dfs and bfs is a valid path
 * 
 * @author mina
 *
 */
public class TestPath {
	private Iterable<Integer> dfs;
	private Iterable<Integer> bfs;
	private Digraph g;

	@Before
	/**
	 * Set up before thetest
	 * @throws IOException
	 */
	public void set_up() throws IOException {
		//read data from connected cities
		DigraphGenerator.read();
		g = DigraphGenerator.graph();
	}

	@Test
	/**
	 * test the path generated by dfs
	 */
	public void test_dfs() {
		//perform the depth first search
		dfs = FindPath.dfs_path();
		
		//convert the iterator to arrayList
		ArrayList<Integer> path = new ArrayList<Integer>();
		for (Integer item:dfs){
			path.add(item);
		}
		
		//create a checker to find how many valid path is in
		int checker = 0;
		
		//check if every nodes connected
		for (int i = 0; i < path.size()-1; i++) {
			Integer from = path.get(i);
			Integer to = path.get(i+1);
			//check all the nodes that <from> points to
			Iterable<Integer> lst = g.adj(from);
			//check <to> is in the lst
			for (Integer item:lst){
				if (to == item){
					//it is a valid path
					//add checker by one
					checker++;
					break;
				}
			}
		}
		//suppose there is 4 nodes in total, 3 path should be valid
		assertEquals(checker,path.size()-1);
	}
	
	@Test
	/**
	 * test the path generated by bfs
	 */
	public void test_bfs() {
		//perform the depth first search
		bfs = FindPath.bfs_path();
				
		//convert the iterator to arrayList
		ArrayList<Integer> path = new ArrayList<Integer>();
		for (Integer item:bfs){
			path.add(item);
		}
				
		//create a checker to find how many valid path is in
		int checker = 0;
		
		//check if every nodes connected
		for (int i = 0; i < path.size()-1; i++) {
			Integer from = path.get(i);
			Integer to = path.get(i+1);
			//check all the nodes that <from> points to
			Iterable<Integer> lst = g.adj(from);
			//check <to> is in the lst
			for (Integer item:lst){
				if (to == item){
					//it is a valid path
					//add checker by one
					checker++;
					break;
				}
			}
		}
		//suppose there is 4 nodes in total, 3 path should be valid
		assertEquals(checker,path.size()-1);
	}

}
